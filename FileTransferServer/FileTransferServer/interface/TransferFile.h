/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TransferFile_H
#define TransferFile_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "FileTrans_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TransferFileIf {
 public:
  virtual ~TransferFileIf() {}
  virtual bool UploadFile(const std::string& file_name, const std::string& file_data, const int64_t file_length) = 0;
  virtual bool isExistFile(const std::string& file_name) = 0;
  virtual void DownloadFile(std::string& _return, const std::string& file_name) = 0;
};

class TransferFileIfFactory {
 public:
  typedef TransferFileIf Handler;

  virtual ~TransferFileIfFactory() {}

  virtual TransferFileIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TransferFileIf* /* handler */) = 0;
};

class TransferFileIfSingletonFactory : virtual public TransferFileIfFactory {
 public:
  TransferFileIfSingletonFactory(const ::std::shared_ptr<TransferFileIf>& iface) : iface_(iface) {}
  virtual ~TransferFileIfSingletonFactory() {}

  virtual TransferFileIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TransferFileIf* /* handler */) {}

 protected:
  ::std::shared_ptr<TransferFileIf> iface_;
};

class TransferFileNull : virtual public TransferFileIf {
 public:
  virtual ~TransferFileNull() {}
  bool UploadFile(const std::string& /* file_name */, const std::string& /* file_data */, const int64_t /* file_length */) {
    bool _return = false;
    return _return;
  }
  bool isExistFile(const std::string& /* file_name */) {
    bool _return = false;
    return _return;
  }
  void DownloadFile(std::string& /* _return */, const std::string& /* file_name */) {
    return;
  }
};

typedef struct _TransferFile_UploadFile_args__isset {
  _TransferFile_UploadFile_args__isset() : file_name(false), file_data(false), file_length(false) {}
  bool file_name :1;
  bool file_data :1;
  bool file_length :1;
} _TransferFile_UploadFile_args__isset;

class TransferFile_UploadFile_args {
 public:

  TransferFile_UploadFile_args(const TransferFile_UploadFile_args&);
  TransferFile_UploadFile_args& operator=(const TransferFile_UploadFile_args&);
  TransferFile_UploadFile_args() : file_name(), file_data(), file_length(0) {
  }

  virtual ~TransferFile_UploadFile_args() noexcept;
  std::string file_name;
  std::string file_data;
  int64_t file_length;

  _TransferFile_UploadFile_args__isset __isset;

  void __set_file_name(const std::string& val);

  void __set_file_data(const std::string& val);

  void __set_file_length(const int64_t val);

  bool operator == (const TransferFile_UploadFile_args & rhs) const
  {
    if (!(file_name == rhs.file_name))
      return false;
    if (!(file_data == rhs.file_data))
      return false;
    if (!(file_length == rhs.file_length))
      return false;
    return true;
  }
  bool operator != (const TransferFile_UploadFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransferFile_UploadFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TransferFile_UploadFile_pargs {
 public:


  virtual ~TransferFile_UploadFile_pargs() noexcept;
  const std::string* file_name;
  const std::string* file_data;
  const int64_t* file_length;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TransferFile_UploadFile_result__isset {
  _TransferFile_UploadFile_result__isset() : success(false) {}
  bool success :1;
} _TransferFile_UploadFile_result__isset;

class TransferFile_UploadFile_result {
 public:

  TransferFile_UploadFile_result(const TransferFile_UploadFile_result&);
  TransferFile_UploadFile_result& operator=(const TransferFile_UploadFile_result&);
  TransferFile_UploadFile_result() : success(0) {
  }

  virtual ~TransferFile_UploadFile_result() noexcept;
  bool success;

  _TransferFile_UploadFile_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const TransferFile_UploadFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TransferFile_UploadFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransferFile_UploadFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TransferFile_UploadFile_presult__isset {
  _TransferFile_UploadFile_presult__isset() : success(false) {}
  bool success :1;
} _TransferFile_UploadFile_presult__isset;

class TransferFile_UploadFile_presult {
 public:


  virtual ~TransferFile_UploadFile_presult() noexcept;
  bool* success;

  _TransferFile_UploadFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TransferFile_isExistFile_args__isset {
  _TransferFile_isExistFile_args__isset() : file_name(false) {}
  bool file_name :1;
} _TransferFile_isExistFile_args__isset;

class TransferFile_isExistFile_args {
 public:

  TransferFile_isExistFile_args(const TransferFile_isExistFile_args&);
  TransferFile_isExistFile_args& operator=(const TransferFile_isExistFile_args&);
  TransferFile_isExistFile_args() : file_name() {
  }

  virtual ~TransferFile_isExistFile_args() noexcept;
  std::string file_name;

  _TransferFile_isExistFile_args__isset __isset;

  void __set_file_name(const std::string& val);

  bool operator == (const TransferFile_isExistFile_args & rhs) const
  {
    if (!(file_name == rhs.file_name))
      return false;
    return true;
  }
  bool operator != (const TransferFile_isExistFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransferFile_isExistFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TransferFile_isExistFile_pargs {
 public:


  virtual ~TransferFile_isExistFile_pargs() noexcept;
  const std::string* file_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TransferFile_isExistFile_result__isset {
  _TransferFile_isExistFile_result__isset() : success(false) {}
  bool success :1;
} _TransferFile_isExistFile_result__isset;

class TransferFile_isExistFile_result {
 public:

  TransferFile_isExistFile_result(const TransferFile_isExistFile_result&);
  TransferFile_isExistFile_result& operator=(const TransferFile_isExistFile_result&);
  TransferFile_isExistFile_result() : success(0) {
  }

  virtual ~TransferFile_isExistFile_result() noexcept;
  bool success;

  _TransferFile_isExistFile_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const TransferFile_isExistFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TransferFile_isExistFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransferFile_isExistFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TransferFile_isExistFile_presult__isset {
  _TransferFile_isExistFile_presult__isset() : success(false) {}
  bool success :1;
} _TransferFile_isExistFile_presult__isset;

class TransferFile_isExistFile_presult {
 public:


  virtual ~TransferFile_isExistFile_presult() noexcept;
  bool* success;

  _TransferFile_isExistFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TransferFile_DownloadFile_args__isset {
  _TransferFile_DownloadFile_args__isset() : file_name(false) {}
  bool file_name :1;
} _TransferFile_DownloadFile_args__isset;

class TransferFile_DownloadFile_args {
 public:

  TransferFile_DownloadFile_args(const TransferFile_DownloadFile_args&);
  TransferFile_DownloadFile_args& operator=(const TransferFile_DownloadFile_args&);
  TransferFile_DownloadFile_args() : file_name() {
  }

  virtual ~TransferFile_DownloadFile_args() noexcept;
  std::string file_name;

  _TransferFile_DownloadFile_args__isset __isset;

  void __set_file_name(const std::string& val);

  bool operator == (const TransferFile_DownloadFile_args & rhs) const
  {
    if (!(file_name == rhs.file_name))
      return false;
    return true;
  }
  bool operator != (const TransferFile_DownloadFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransferFile_DownloadFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TransferFile_DownloadFile_pargs {
 public:


  virtual ~TransferFile_DownloadFile_pargs() noexcept;
  const std::string* file_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TransferFile_DownloadFile_result__isset {
  _TransferFile_DownloadFile_result__isset() : success(false) {}
  bool success :1;
} _TransferFile_DownloadFile_result__isset;

class TransferFile_DownloadFile_result {
 public:

  TransferFile_DownloadFile_result(const TransferFile_DownloadFile_result&);
  TransferFile_DownloadFile_result& operator=(const TransferFile_DownloadFile_result&);
  TransferFile_DownloadFile_result() : success() {
  }

  virtual ~TransferFile_DownloadFile_result() noexcept;
  std::string success;

  _TransferFile_DownloadFile_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const TransferFile_DownloadFile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TransferFile_DownloadFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TransferFile_DownloadFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TransferFile_DownloadFile_presult__isset {
  _TransferFile_DownloadFile_presult__isset() : success(false) {}
  bool success :1;
} _TransferFile_DownloadFile_presult__isset;

class TransferFile_DownloadFile_presult {
 public:


  virtual ~TransferFile_DownloadFile_presult() noexcept;
  std::string* success;

  _TransferFile_DownloadFile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TransferFileClient : virtual public TransferFileIf {
 public:
  TransferFileClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TransferFileClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool UploadFile(const std::string& file_name, const std::string& file_data, const int64_t file_length);
  void send_UploadFile(const std::string& file_name, const std::string& file_data, const int64_t file_length);
  bool recv_UploadFile();
  bool isExistFile(const std::string& file_name);
  void send_isExistFile(const std::string& file_name);
  bool recv_isExistFile();
  void DownloadFile(std::string& _return, const std::string& file_name);
  void send_DownloadFile(const std::string& file_name);
  void recv_DownloadFile(std::string& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TransferFileProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<TransferFileIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TransferFileProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_UploadFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isExistFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_DownloadFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TransferFileProcessor(::std::shared_ptr<TransferFileIf> iface) :
    iface_(iface) {
    processMap_["UploadFile"] = &TransferFileProcessor::process_UploadFile;
    processMap_["isExistFile"] = &TransferFileProcessor::process_isExistFile;
    processMap_["DownloadFile"] = &TransferFileProcessor::process_DownloadFile;
  }

  virtual ~TransferFileProcessor() {}
};

class TransferFileProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TransferFileProcessorFactory(const ::std::shared_ptr< TransferFileIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< TransferFileIfFactory > handlerFactory_;
};

class TransferFileMultiface : virtual public TransferFileIf {
 public:
  TransferFileMultiface(std::vector<std::shared_ptr<TransferFileIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TransferFileMultiface() {}
 protected:
  std::vector<std::shared_ptr<TransferFileIf> > ifaces_;
  TransferFileMultiface() {}
  void add(::std::shared_ptr<TransferFileIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool UploadFile(const std::string& file_name, const std::string& file_data, const int64_t file_length) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UploadFile(file_name, file_data, file_length);
    }
    return ifaces_[i]->UploadFile(file_name, file_data, file_length);
  }

  bool isExistFile(const std::string& file_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isExistFile(file_name);
    }
    return ifaces_[i]->isExistFile(file_name);
  }

  void DownloadFile(std::string& _return, const std::string& file_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->DownloadFile(_return, file_name);
    }
    ifaces_[i]->DownloadFile(_return, file_name);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TransferFileConcurrentClient : virtual public TransferFileIf {
 public:
  TransferFileConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  TransferFileConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool UploadFile(const std::string& file_name, const std::string& file_data, const int64_t file_length);
  int32_t send_UploadFile(const std::string& file_name, const std::string& file_data, const int64_t file_length);
  bool recv_UploadFile(const int32_t seqid);
  bool isExistFile(const std::string& file_name);
  int32_t send_isExistFile(const std::string& file_name);
  bool recv_isExistFile(const int32_t seqid);
  void DownloadFile(std::string& _return, const std::string& file_name);
  int32_t send_DownloadFile(const std::string& file_name);
  void recv_DownloadFile(std::string& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
